.ONESHELL: ;
.NOTPARALLEL: ;
default: help;

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥
DOCKER_COMPOSE = docker compose
DOCKER_PROJECT = $(shell grep DOCKER_PROJECT_NAME .env | cut -d '=' -f2 2>/dev/null || echo "default")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
DOCKER := $(shell command -v docker 2> /dev/null)
DOCKER_COMPOSE_CMD := $(shell command -v docker-compose 2> /dev/null || command -v docker 2> /dev/null)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
COLOR_RESET = \033[0m
COLOR_INFO = \033[36m
COLOR_SUCCESS = \033[32m
COLOR_WARNING = \033[33m
COLOR_ERROR = \033[31m

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
define FRONTEND_COMMANDS
  term    - –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  logs    - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  dev     - –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  build   - –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
endef
export FRONTEND_COMMANDS

define BACKEND_COMMANDS
  term    - –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å –±—ç–∫–µ–Ω–¥–∞
  logs    - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞
  clear   - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  routes  - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
endef
export BACKEND_COMMANDS

define DB_COMMANDS
  migrate - –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  seed    - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  reset   - –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è
  fresh   - –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π
  dump    - –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑ backend/.env –∏–ª–∏ DB_TYPE=mysql|postgres DUMP_PATH=./path)
endef
export DB_COMMANDS

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
MAKECMDGOALS_LIST = $(MAKECMDGOALS)
ifeq (d-build,$(firstword $(MAKECMDGOALS)))
  # –î–ª—è d-build –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ d-build –∫–∞–∫ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
  BUILD_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # –£–±–∏—Ä–∞–µ–º —ç—Ç–∏ —Ü–µ–ª–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "No rule to make target"
  ifneq ($(BUILD_ARGS),)
    $(eval $(BUILD_ARGS):;@:)
  endif
endif

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ frontend, backend –∏ db
ifeq (frontend,$(firstword $(MAKECMDGOALS)))
  # –î–ª—è frontend –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ frontend –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
  FRONTEND_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # –£–±–∏—Ä–∞–µ–º —ç—Ç–∏ —Ü–µ–ª–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  ifneq ($(FRONTEND_ARGS),)
    $(eval $(FRONTEND_ARGS):;@:)
  endif
endif

ifeq (backend,$(firstword $(MAKECMDGOALS)))
  # –î–ª—è backend –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ backend –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
  BACKEND_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # –£–±–∏—Ä–∞–µ–º —ç—Ç–∏ —Ü–µ–ª–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  ifneq ($(BACKEND_ARGS),)
    $(eval $(BACKEND_ARGS):;@:)
  endif
endif

ifeq (db,$(firstword $(MAKECMDGOALS)))
  # –î–ª—è db –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ db –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
  DB_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  # –£–±–∏—Ä–∞–µ–º —ç—Ç–∏ —Ü–µ–ª–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  ifneq ($(DB_ARGS),)
    $(eval $(DB_ARGS):;@:)
  endif
endif

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∫–æ–¥
%:
	@:

##############################################################################
# –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
##############################################################################

.PHONY: help
help: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
	@egrep -h '\s##\s' Makefile | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(COLOR_INFO)%-20s$(COLOR_RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(COLOR_INFO)–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã:$(COLOR_RESET)"
	@echo ""
	@echo "$(COLOR_INFO)frontend [–∫–æ–º–∞–Ω–¥–∞]:$(COLOR_RESET)"
	@echo "$$FRONTEND_COMMANDS"
	@echo ""
	@echo "$(COLOR_INFO)backend [–∫–æ–º–∞–Ω–¥–∞]:$(COLOR_RESET)"
	@echo "$$BACKEND_COMMANDS"
	@echo ""
	@echo "$(COLOR_INFO)db [–∫–æ–º–∞–Ω–¥–∞]:$(COLOR_RESET)"
	@echo "$$DB_COMMANDS"

.PHONY: check-requirements
check-requirements: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
ifndef DOCKER
	@echo "$(COLOR_ERROR)Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker.$(COLOR_RESET)"
	@exit 1
endif
ifndef DOCKER_COMPOSE_CMD
	@echo "$(COLOR_ERROR)Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose.$(COLOR_RESET)"
	@exit 1
endif

.PHONY: validate-env
validate-env: ## –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	@echo "$(COLOR_INFO)–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(COLOR_RESET)"
	@errors=0; \
	if [ ! -f .env ]; then \
		echo "$(COLOR_ERROR)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω$(COLOR_RESET)"; \
		errors=$$((errors + 1)); \
	else \
		echo "$(COLOR_SUCCESS)‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω$(COLOR_RESET)"; \
		if ! grep -q "DOCKER_PROJECT_NAME=" .env; then \
			echo "$(COLOR_WARNING)‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DOCKER_PROJECT_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env$(COLOR_RESET)"; \
			errors=$$((errors + 1)); \
		fi; \
	fi; \
	if [ ! -f backend/.env ]; then \
		echo "$(COLOR_ERROR)‚ùå –§–∞–π–ª backend/.env –Ω–µ –Ω–∞–π–¥–µ–Ω$(COLOR_RESET)"; \
		errors=$$((errors + 1)); \
	else \
		echo "$(COLOR_SUCCESS)‚úÖ –§–∞–π–ª backend/.env –Ω–∞–π–¥–µ–Ω$(COLOR_RESET)"; \
		for var in DB_HOST DB_PORT DB_DATABASE APP_KEY; do \
			if ! grep -q "$$var=" backend/.env; then \
				echo "$(COLOR_WARNING)‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $$var –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ backend/.env$(COLOR_RESET)"; \
				errors=$$((errors + 1)); \
			fi; \
		done; \
	fi; \
	if [ ! -f frontend/.env ]; then \
		echo "$(COLOR_ERROR)‚ùå –§–∞–π–ª frontend/.env –Ω–µ –Ω–∞–π–¥–µ–Ω$(COLOR_RESET)"; \
		errors=$$((errors + 1)); \
	else \
		echo "$(COLOR_SUCCESS)‚úÖ –§–∞–π–ª frontend/.env –Ω–∞–π–¥–µ–Ω$(COLOR_RESET)"; \
	fi; \
	if [ $$errors -eq 0 ]; then \
		echo "$(COLOR_SUCCESS)üéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ$(COLOR_RESET)"; \
	else \
		echo "$(COLOR_ERROR)‚ùå –ù–∞–π–¥–µ–Ω–æ $$errors –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏$(COLOR_RESET)"; \
		echo "$(COLOR_INFO)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make env' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è$(COLOR_RESET)"; \
		exit 1; \
	fi

.PHONY: env
env: ## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	cp -n .env.example .env || echo ".env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	cp -n backend/.env.example backend/.env || echo "backend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
	cp -n frontend/.env.example frontend/.env || echo "frontend/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"



##############################################################################
# DOCKER
##############################################################################

.PHONY: d-build
d-build: check-requirements ## –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make d-build [—Å–µ—Ä–≤–∏—Å]
	@if [ -n "$(BUILD_ARGS)" ]; then \
		echo "–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ $(BUILD_ARGS)..."; \
		$(DOCKER_COMPOSE) build $(BUILD_ARGS); \
	else \
		echo "–°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."; \
		$(DOCKER_COMPOSE) build; \
	fi

.PHONY: d-init
d-init: ## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
	@echo "–ò–Ω–∏—Ü—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞..."
	make env
	make d-build

.PHONY: d-up
d-up: check-requirements validate-env ## –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	@if $(DOCKER_COMPOSE) up -d; then \
		echo "$(COLOR_SUCCESS)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã$(COLOR_RESET)"; \
		echo "$(COLOR_INFO)üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: make d-status$(COLOR_RESET)"; \
	else \
		echo "$(COLOR_ERROR)‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤$(COLOR_RESET)"; \
		echo "$(COLOR_INFO)üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: make d-logs$(COLOR_RESET)"; \
		exit 1; \
	fi

.PHONY: d-down
d-down: check-requirements ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	@if $(DOCKER_COMPOSE) down; then \
		echo "$(COLOR_SUCCESS)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(COLOR_RESET)"; \
	else \
		echo "$(COLOR_ERROR)‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤$(COLOR_RESET)"; \
		exit 1; \
	fi

.PHONY: d-start
d-start: check-requirements ## –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	$(DOCKER_COMPOSE) start

.PHONY: d-stop
d-stop: check-requirements ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	$(DOCKER_COMPOSE) stop

.PHONY: d-restart
d-restart: check-requirements ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	$(DOCKER_COMPOSE) restart

.PHONY: d-logs
d-logs: check-requirements ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	$(DOCKER_COMPOSE) logs -f

.PHONY: d-status
d-status: check-requirements ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
	@$(DOCKER_COMPOSE) ps
	@echo ""
	@if $(DOCKER_COMPOSE) ps --services --filter "status=running" | wc -l | grep -q "^0$$"; then \
		echo "$(COLOR_WARNING)‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make d-up$(COLOR_RESET)"; \
	else \
		echo "$(COLOR_SUCCESS)‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç$(COLOR_RESET)"; \
	fi

##############################################################################
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
##############################################################################

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
check-service = $(shell $(DOCKER_COMPOSE) ps --services --filter "status=running" | grep -q "^$(1)$$" && echo "ok" || echo "fail")

##############################################################################
# –§–†–û–ù–¢–ï–ù–î
##############################################################################

.PHONY: frontend
frontend: check-requirements ## –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make frontend [–∫–æ–º–∞–Ω–¥–∞]
	@if ! $(DOCKER_COMPOSE) ps --services --filter "status=running" | grep -q "^frontend$$"; then \
		echo "$(COLOR_ERROR)‚ùå –°–µ—Ä–≤–∏—Å frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω$(COLOR_RESET)"; \
		echo "$(COLOR_INFO)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: make d-up$(COLOR_RESET)"; \
		exit 1; \
	fi
	@if [ -z "$(FRONTEND_ARGS)" ]; then \
		echo "$(COLOR_ERROR)–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make frontend [–∫–æ–º–∞–Ω–¥–∞]$(COLOR_RESET)"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"; \
		echo "$$FRONTEND_COMMANDS"; \
		exit 1; \
	elif [ "$(FRONTEND_ARGS)" = "term" ]; then \
		echo "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."; \
		$(DOCKER_COMPOSE) exec frontend bash; \
	elif [ "$(FRONTEND_ARGS)" = "logs" ]; then \
		echo "–õ–æ–≥–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."; \
		$(DOCKER_COMPOSE) logs -f frontend; \
	elif [ "$(FRONTEND_ARGS)" = "dev" ]; then \
		echo "–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."; \
		$(DOCKER_COMPOSE) exec frontend npm run dev; \
	elif [ "$(FRONTEND_ARGS)" = "build" ]; then \
		echo "–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."; \
		$(DOCKER_COMPOSE) exec frontend npm run build; \
	else \
		echo "$(COLOR_ERROR)–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $(FRONTEND_ARGS)$(COLOR_RESET)"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"; \
		echo "$$FRONTEND_COMMANDS"; \
		exit 1; \
	fi

##############################################################################
# –ë–≠–ö–ï–ù–î
##############################################################################

.PHONY: backend
backend: check-requirements ## –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ç–∫–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make backend [–∫–æ–º–∞–Ω–¥–∞]
	@if ! $(DOCKER_COMPOSE) ps --services --filter "status=running" | grep -q "^backend$$"; then \
		echo "$(COLOR_ERROR)‚ùå –°–µ—Ä–≤–∏—Å backend –Ω–µ –∑–∞–ø—É—â–µ–Ω$(COLOR_RESET)"; \
		echo "$(COLOR_INFO)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: make d-up$(COLOR_RESET)"; \
		exit 1; \
	fi
	@if [ -z "$(BACKEND_ARGS)" ]; then \
		echo "$(COLOR_ERROR)–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make backend [–∫–æ–º–∞–Ω–¥–∞]$(COLOR_RESET)"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"; \
		echo "$$BACKEND_COMMANDS"; \
		exit 1; \
	elif [ "$(BACKEND_ARGS)" = "term" ]; then \
		echo "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –±—ç–∫–µ–Ω–¥–∞..."; \
		$(DOCKER_COMPOSE) exec backend bash; \
	elif [ "$(BACKEND_ARGS)" = "logs" ]; then \
		echo "–õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞..."; \
		$(DOCKER_COMPOSE) logs -f backend; \
	elif [ "$(BACKEND_ARGS)" = "routes" ]; then \
		echo "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."; \
		$(DOCKER_COMPOSE) exec backend php artisan route:list; \
	elif [ "$(BACKEND_ARGS)" = "clear" ]; then \
		echo "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."; \
		$(DOCKER_COMPOSE) exec backend php artisan cache:clear; \
		$(DOCKER_COMPOSE) exec backend php artisan config:clear; \
		$(DOCKER_COMPOSE) exec backend php artisan route:clear; \
		$(DOCKER_COMPOSE) exec backend php artisan view:clear; \
	else \
		echo "$(COLOR_ERROR)–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $(BACKEND_ARGS)$(COLOR_RESET)"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"; \
		echo "$$BACKEND_COMMANDS"; \
		exit 1; \
	fi

##############################################################################
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
##############################################################################

.PHONY: db
db: check-requirements ## –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make db [–∫–æ–º–∞–Ω–¥–∞]
	@if ! $(DOCKER_COMPOSE) ps --services --filter "status=running" | grep -q "^database$$"; then \
		echo "$(COLOR_ERROR)‚ùå –°–µ—Ä–≤–∏—Å database –Ω–µ –∑–∞–ø—É—â–µ–Ω$(COLOR_RESET)"; \
		echo "$(COLOR_INFO)üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: make d-up$(COLOR_RESET)"; \
		exit 1; \
	fi
	@if [ -z "$(DB_ARGS)" ]; then \
		echo "$(COLOR_ERROR)–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make db [–∫–æ–º–∞–Ω–¥–∞]$(COLOR_RESET)"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"; \
		echo "$$DB_COMMANDS"; \
		exit 1; \
	elif [ "$(DB_ARGS)" = "migrate" ]; then \
		echo "–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."; \
		$(DOCKER_COMPOSE) exec backend php artisan migrate; \
	elif [ "$(DB_ARGS)" = "seed" ]; then \
		echo "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."; \
		$(DOCKER_COMPOSE) exec backend php artisan db:seed; \
	elif [ "$(DB_ARGS)" = "reset" ]; then \
		echo "–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏—è..."; \
		$(DOCKER_COMPOSE) exec backend php artisan migrate:reset; \
	elif [ "$(DB_ARGS)" = "fresh" ]; then \
		echo "–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π..."; \
		$(DOCKER_COMPOSE) exec backend php artisan migrate:fresh; \
	elif [ "$(DB_ARGS)" = "dump" ]; then \
		echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."; \
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ENV_VAR_DB_CONNECTION –≤ backend/.env
		if [ -f backend/.env ]; then \
			DB_CONNECTION=$$(grep DB_CONNECTION backend/.env | cut -d '=' -f2 2>/dev/null); \
		fi; \
		# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DB_TYPE –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º DB_CONNECTION –∏–ª–∏ postgres –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		DB_TYPE=$$(echo $$DB_TYPE | tr '[:upper:]' '[:lower:]' || echo "$${DB_CONNECTION:-postgres}" | tr '[:upper:]' '[:lower:]'); \
		DUMP_PATH=$$(echo $$DUMP_PATH || echo "."); \
		echo "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $$DB_TYPE"; \
		if [ "$$DB_TYPE" = "mysql" ]; then \
			echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ MySQL –≤ $$DUMP_PATH..."; \
			$(DOCKER_COMPOSE) exec db mysqldump -u$${MYSQL_USER:-root} -p$${MYSQL_PASSWORD:-password} $${MYSQL_DATABASE:-laravel} > "$$DUMP_PATH/mysql_dump_$$(date +%Y%m%d_%H%M%S).sql"; \
		elif [ "$$DB_TYPE" = "postgres" ]; then \
			echo "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ PostgreSQL –≤ $$DUMP_PATH..."; \
			$(DOCKER_COMPOSE) exec db pg_dump -U $${POSTGRES_USER:-postgres} $${POSTGRES_DB:-laravel} > "$$DUMP_PATH/postgres_dump_$$(date +%Y%m%d_%H%M%S).sql"; \
		else \
			echo "$(COLOR_ERROR)–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $$DB_TYPE. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mysql –∏–ª–∏ postgres.$(COLOR_RESET)"; \
			exit 1; \
		fi; \
		echo "–î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω –≤ $$DUMP_PATH"; \
	else \
		echo "$(COLOR_ERROR)–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $(DB_ARGS)$(COLOR_RESET)"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"; \
		echo "$$DB_COMMANDS"; \
		exit 1; \
	fi

##############################################################################
# –û–ß–ò–°–¢–ö–ê –ò –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï
##############################################################################

.PHONY: clean
clean: ## –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
	@echo "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	find . -name "*.tmp" -type f -delete
	find . -name "*.log" -type f -delete

.PHONY: d-prune
d-prune: check-requirements ## –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
	docker system prune -af --volumes